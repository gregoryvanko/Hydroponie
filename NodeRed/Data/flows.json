[
    {
        "id": "37bc5d1b0738c09e",
        "type": "tab",
        "label": "CAN Bus",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec5bd3851ded0af3",
        "type": "tab",
        "label": "Capteur Temperature",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8be2de6d3dfabc6a",
        "type": "tab",
        "label": "Capteur Niveau eau",
        "disabled": false,
        "info": ""
    },
    {
        "id": "68559bc850822b28",
        "type": "tab",
        "label": "Capteur Eau citerne",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cd0de7ec7d7b0cc3",
        "type": "tab",
        "label": "Capteur TDS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "829f0f27baac9fee",
        "type": "tab",
        "label": "Set Input",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "64750ab7c62dcc42",
        "type": "group",
        "z": "829f0f27baac9fee",
        "name": "Initiation",
        "style": {
            "label": true
        },
        "nodes": [
            "22b89a8a12a029fe",
            "051930ac3ac4a449",
            "a52b542c6392c157",
            "d93ce52835a7c33f",
            "21bd404c806cb129",
            "55cbe8bef5d888df"
        ],
        "x": 54,
        "y": 19,
        "w": 732,
        "h": 142
    },
    {
        "id": "024ee163770b1f3c",
        "type": "group",
        "z": "829f0f27baac9fee",
        "name": "Get & Set inputs value",
        "style": {
            "label": true
        },
        "nodes": [
            "9d06d2dccec353ea",
            "bcd5b67d70ab3d4a",
            "de7fc0e2fa34aeaa",
            "795330a9fc23aa21",
            "4de1fb0565a38dd2"
        ],
        "x": 54,
        "y": 199,
        "w": 992,
        "h": 82
    },
    {
        "id": "8f35003b0cc36ee5",
        "type": "ui_tab",
        "name": "Value",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "66e2d93ae7ebac04",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "80145f6438d993ee",
        "type": "ui_group",
        "name": "Value",
        "tab": "8f35003b0cc36ee5",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "cfb206593b61e545",
        "type": "ui_group",
        "name": "Temperature",
        "tab": "6bce420ab49c6829",
        "order": 3,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6bce420ab49c6829",
        "type": "ui_tab",
        "name": "Graph",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "211febbd4a9f7ab4",
        "type": "ui_group",
        "name": "Niveau Eau",
        "tab": "6bce420ab49c6829",
        "order": 4,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "acfb3ac3c77092b6",
        "type": "ui_group",
        "name": "Input",
        "tab": "8f35003b0cc36ee5",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4851596e52d14044",
        "type": "socketcan-config",
        "interface": "can0"
    },
    {
        "id": "bb1c440df132940b",
        "type": "ui_group",
        "name": "TDS",
        "tab": "6bce420ab49c6829",
        "order": 5,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9a5eecc837c8c607",
        "type": "ui_group",
        "name": "Statut",
        "tab": "6bce420ab49c6829",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "89b0847a90cea17c",
        "type": "function",
        "z": "37bc5d1b0738c09e",
        "name": "canid split",
        "func": "let id = msg.payload.canid\nif (id == 0x100){\n    return [msg, null];\n} else if (id == 0x200){\n    return [null, msg];\n} else {\n    node.error(\"canid not found il function node\", msg);\n}\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "fcc3a795438a4058"
            ],
            [
                "c0b0f0de86a2bbeb"
            ]
        ]
    },
    {
        "id": "3d95f03f794eb5cb",
        "type": "debug",
        "z": "37bc5d1b0738c09e",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 180,
        "wires": []
    },
    {
        "id": "ef35e583fbbb9a9f",
        "type": "socketcan-out",
        "z": "37bc5d1b0738c09e",
        "name": "socketcan-out",
        "config": "4851596e52d14044",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "89b0847a90cea17c"
            ]
        ]
    },
    {
        "id": "9ace933999cf6a78",
        "type": "debug",
        "z": "37bc5d1b0738c09e",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 400,
        "wires": []
    },
    {
        "id": "fcc3a795438a4058",
        "type": "function",
        "z": "37bc5d1b0738c09e",
        "name": "MSG 0X100 Can to Json",
        "func": "let data = Buffer.from(msg.payload.data) \nlet out = { \n    \"eau\": data.readInt8(0),\n    \"temp\": data.readFloatLE(1).toFixed(1)\n    }\n\nmsg.payload = out\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 240,
        "wires": [
            [
                "3d95f03f794eb5cb",
                "be6051baf13d6e8d"
            ]
        ]
    },
    {
        "id": "c0b0f0de86a2bbeb",
        "type": "function",
        "z": "37bc5d1b0738c09e",
        "name": "MSG 0X200 Can to Json",
        "func": "let data = Buffer.from(msg.payload.data) \nlet out = { \n    \"sonar\": data.readFloatLE(0).toFixed(2),\n    \"TDS\": data.readFloatLE(4).toFixed(2)\n    }\n\nmsg.payload = out\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 340,
        "wires": [
            [
                "9ace933999cf6a78",
                "e79b5c9fc3ef49b1"
            ]
        ]
    },
    {
        "id": "be6051baf13d6e8d",
        "type": "link out",
        "z": "37bc5d1b0738c09e",
        "name": "CAN100",
        "mode": "link",
        "links": [
            "6e9ca9b263d9e303",
            "513a71f57ce1b0a6",
            "51d8b2319b5abecd"
        ],
        "x": 855,
        "y": 240,
        "wires": []
    },
    {
        "id": "e79b5c9fc3ef49b1",
        "type": "link out",
        "z": "37bc5d1b0738c09e",
        "name": "CAN200",
        "mode": "link",
        "links": [
            "b16d7992a3b9dde5",
            "85424e1e25daf62e"
        ],
        "x": 835,
        "y": 340,
        "wires": []
    },
    {
        "id": "98f86843821646a9",
        "type": "function",
        "z": "ec5bd3851ded0af3",
        "name": "Save TempSensor1",
        "func": "let Name = \"TempSensor1\"\n\nlet AllData = global.get(Name) || []\nAllData.push({ time: new Date().getTime(), data: msg.payload })\nglobal.set(Name, AllData)",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4b688510d5c88e78",
        "type": "ui_text",
        "z": "ec5bd3851ded0af3",
        "group": "80145f6438d993ee",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "TempSensor1",
        "label": "Temperature Cuve",
        "format": "{{msg.payload}} °c",
        "layout": "col-center",
        "x": 420,
        "y": 160,
        "wires": []
    },
    {
        "id": "307d0165113a9d24",
        "type": "function",
        "z": "ec5bd3851ded0af3",
        "name": "Get eau",
        "func": "let arrondi = Number.parseFloat(msg.payload.temp).toFixed(0)\nmsg.payload = arrondi.toString()\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 220,
        "wires": [
            [
                "4b688510d5c88e78",
                "216539a959245c36",
                "c60c294f8a6d343a"
            ]
        ]
    },
    {
        "id": "216539a959245c36",
        "type": "delay",
        "z": "ec5bd3851ded0af3",
        "name": "Garde 1 msg par 10min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "d48beca72ea0e989"
            ]
        ]
    },
    {
        "id": "d48beca72ea0e989",
        "type": "ui_chart",
        "z": "ec5bd3851ded0af3",
        "name": "Temperature",
        "group": "cfb206593b61e545",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 690,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6e9ca9b263d9e303",
        "type": "link in",
        "z": "ec5bd3851ded0af3",
        "name": "link in 1",
        "links": [
            "be6051baf13d6e8d"
        ],
        "x": 135,
        "y": 220,
        "wires": [
            [
                "307d0165113a9d24"
            ]
        ]
    },
    {
        "id": "c60c294f8a6d343a",
        "type": "debug",
        "z": "ec5bd3851ded0af3",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 280,
        "wires": []
    },
    {
        "id": "ac1978049d2efa5a",
        "type": "function",
        "z": "8be2de6d3dfabc6a",
        "name": "Save Ultrason1",
        "func": "let Name = \"Ultrason1\"\n\nlet AllData = global.get(Name) || []\nAllData.push({ time: new Date().getTime(), data: msg.payload })\nglobal.set(Name, AllData)",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "fc15b10661ba1546",
        "type": "ui_text",
        "z": "8be2de6d3dfabc6a",
        "group": "80145f6438d993ee",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Ultrason1",
        "label": "Niveau eau Cuve",
        "format": "{{msg.payload}} cm",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 423,
        "y": 153,
        "wires": []
    },
    {
        "id": "024109f0c5f6eb73",
        "type": "ui_gauge",
        "z": "8be2de6d3dfabc6a",
        "name": "",
        "group": "9a5eecc837c8c607",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "Niveau Eau",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ff2600",
            "#e6e600",
            "#00f900"
        ],
        "seg1": "10",
        "seg2": "20",
        "diff": false,
        "className": "",
        "x": 850,
        "y": 160,
        "wires": []
    },
    {
        "id": "5ab05137dc585294",
        "type": "debug",
        "z": "8be2de6d3dfabc6a",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 300,
        "wires": []
    },
    {
        "id": "5eff6ddb5fb994ed",
        "type": "delay",
        "z": "8be2de6d3dfabc6a",
        "name": "Garde 1 msg par 10min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 890,
        "y": 220,
        "wires": [
            [
                "8dfaeb1745400549"
            ]
        ]
    },
    {
        "id": "8dfaeb1745400549",
        "type": "ui_chart",
        "z": "8be2de6d3dfabc6a",
        "name": "Niveau eau",
        "group": "211febbd4a9f7ab4",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Niveau Eau",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1130,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "70fa6172b52f5a0a",
        "type": "function",
        "z": "8be2de6d3dfabc6a",
        "name": "bloque si au dessu de max value",
        "func": "let SONAR_MAX = parseInt(global.get(\"SONAR_MAX\"))\nlet MaxValue = SONAR_MAX + (SONAR_MAX*0.1)\n\nif (msg.payload < MaxValue){\n    return msg;\n} else {\n    node.warn(\"la valeur mesurée depasse la limite max\");\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 220,
        "wires": [
            [
                "b386e894fddf3583"
            ]
        ]
    },
    {
        "id": "b386e894fddf3583",
        "type": "function",
        "z": "8be2de6d3dfabc6a",
        "name": "Range",
        "func": "let data = Number.parseFloat(msg.payload)\n\nlet inMin = global.get(\"SONAR_MIN\")\nlet inMax = global.get(\"SONAR_MAX\")\n\nlet outMin = 100\nlet outMax = 0\n\n//let range = (data - inMin) * (outMax - outMin) / (inMax - inMin) + outMin\nlet range = ( 1 -((data - inMin) / (inMax - inMin))) *100\nrange = range.toFixed(0)\nmsg.payload = range\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 220,
        "wires": [
            [
                "5eff6ddb5fb994ed",
                "024109f0c5f6eb73"
            ]
        ]
    },
    {
        "id": "b16d7992a3b9dde5",
        "type": "link in",
        "z": "8be2de6d3dfabc6a",
        "name": "link in 2",
        "links": [
            "e79b5c9fc3ef49b1"
        ],
        "x": 165,
        "y": 220,
        "wires": [
            [
                "6cd605785a15d0cf"
            ]
        ]
    },
    {
        "id": "6cd605785a15d0cf",
        "type": "function",
        "z": "8be2de6d3dfabc6a",
        "name": "get sonar",
        "func": "let data = Number.parseFloat(msg.payload.sonar).toFixed(0)\nmsg.payload = data.toString()\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 220,
        "wires": [
            [
                "70fa6172b52f5a0a",
                "fc15b10661ba1546",
                "5ab05137dc585294"
            ]
        ]
    },
    {
        "id": "5cee09d08af2609f",
        "type": "function",
        "z": "68559bc850822b28",
        "name": "Save CapteurEau",
        "func": "let Name = \"CapteurEau1\"\n\nlet AllData = global.get(Name) || []\nAllData.push({ time: new Date().getTime(), data: msg.payload })\nglobal.set(Name, AllData)",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "8e4347e83ecfe6fc",
        "type": "ui_text",
        "z": "68559bc850822b28",
        "group": "80145f6438d993ee",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Capteur eau",
        "label": "Capteur eau",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 390,
        "y": 60,
        "wires": []
    },
    {
        "id": "aeac2886241e3dbc",
        "type": "function",
        "z": "68559bc850822b28",
        "name": "Get eau",
        "func": "let data = msg.payload.eau\nmsg.payload = data\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 160,
        "wires": [
            [
                "8e4347e83ecfe6fc",
                "54d6e2c871c5a7cb",
                "5f0821d809ae7948",
                "38d36b45d7ce49f7"
            ]
        ]
    },
    {
        "id": "54d6e2c871c5a7cb",
        "type": "delay",
        "z": "68559bc850822b28",
        "name": "Garde 1 msg par 10min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 430,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "513a71f57ce1b0a6",
        "type": "link in",
        "z": "68559bc850822b28",
        "name": "link in 3",
        "links": [
            "be6051baf13d6e8d"
        ],
        "x": 115,
        "y": 160,
        "wires": [
            [
                "aeac2886241e3dbc"
            ]
        ]
    },
    {
        "id": "5f0821d809ae7948",
        "type": "debug",
        "z": "68559bc850822b28",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 220,
        "wires": []
    },
    {
        "id": "38d36b45d7ce49f7",
        "type": "ui_led",
        "z": "68559bc850822b28",
        "order": 1,
        "group": "9a5eecc837c8c607",
        "width": 0,
        "height": 0,
        "label": "Retour Eau",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Retour Eau",
        "x": 390,
        "y": 100,
        "wires": []
    },
    {
        "id": "1a1fd5e5499967da",
        "type": "function",
        "z": "cd0de7ec7d7b0cc3",
        "name": "Save TDS",
        "func": "let Name = \"TDS\"\n\nlet AllData = global.get(Name) || []\nAllData.push({ time: new Date().getTime(), data: msg.payload })\nglobal.set(Name, AllData)",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a09c09837690d688",
        "type": "ui_text",
        "z": "cd0de7ec7d7b0cc3",
        "group": "80145f6438d993ee",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "TDS",
        "label": "TDS",
        "format": "{{msg.payload}} us",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 370,
        "y": 120,
        "wires": []
    },
    {
        "id": "568d51c3cb92ada9",
        "type": "function",
        "z": "cd0de7ec7d7b0cc3",
        "name": "Get TDS",
        "func": "let arrondi = Number.parseFloat(msg.payload.TDS).toFixed(0)\nmsg.payload = arrondi.toString()\nreturn msg",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 180,
        "wires": [
            [
                "a09c09837690d688",
                "f5b75ea252016322",
                "3963a8af38c8a3b8"
            ]
        ]
    },
    {
        "id": "f5b75ea252016322",
        "type": "delay",
        "z": "cd0de7ec7d7b0cc3",
        "name": "Garde 1 msg par 10min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 430,
        "y": 180,
        "wires": [
            [
                "3516b349d65670eb"
            ]
        ]
    },
    {
        "id": "3516b349d65670eb",
        "type": "ui_chart",
        "z": "cd0de7ec7d7b0cc3",
        "name": "TDS",
        "group": "bb1c440df132940b",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "TDS",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 650,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "85424e1e25daf62e",
        "type": "link in",
        "z": "cd0de7ec7d7b0cc3",
        "name": "link in 4",
        "links": [
            "e79b5c9fc3ef49b1"
        ],
        "x": 115,
        "y": 180,
        "wires": [
            [
                "568d51c3cb92ada9"
            ]
        ]
    },
    {
        "id": "3963a8af38c8a3b8",
        "type": "debug",
        "z": "cd0de7ec7d7b0cc3",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 240,
        "wires": []
    },
    {
        "id": "9d06d2dccec353ea",
        "type": "ui_form",
        "z": "829f0f27baac9fee",
        "g": "024ee163770b1f3c",
        "name": "Input",
        "label": "Input",
        "group": "acfb3ac3c77092b6",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Min",
                "value": "Min",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Max",
                "value": "Max",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Min": "",
            "Max": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 530,
        "y": 240,
        "wires": [
            [
                "795330a9fc23aa21"
            ]
        ]
    },
    {
        "id": "bcd5b67d70ab3d4a",
        "type": "function",
        "z": "829f0f27baac9fee",
        "g": "024ee163770b1f3c",
        "name": "Set defaut",
        "func": "let inMin = global.get(\"SONAR_MIN\")\nlet inMax = global.get(\"SONAR_MAX\")\n\nlet data = {\"Min\" : inMin, \"Max\" : inMax}\nmsg.payload = data\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 240,
        "wires": [
            [
                "9d06d2dccec353ea"
            ]
        ]
    },
    {
        "id": "de7fc0e2fa34aeaa",
        "type": "ui_button",
        "z": "829f0f27baac9fee",
        "g": "024ee163770b1f3c",
        "name": "Get input value",
        "group": "acfb3ac3c77092b6",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": false,
        "label": "Get input value",
        "tooltip": "",
        "color": "",
        "bgcolor": "lightblue",
        "className": "",
        "icon": "",
        "payload": "set",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "bcd5b67d70ab3d4a"
            ]
        ]
    },
    {
        "id": "795330a9fc23aa21",
        "type": "function",
        "z": "829f0f27baac9fee",
        "g": "024ee163770b1f3c",
        "name": "Set defaut value",
        "func": "let Min = \"SONAR_MIN\"\nlet Max = \"SONAR_MAX\"\n\nglobal.set(Min, parseFloat(msg.payload.Min))\nglobal.set(Max, parseFloat(msg.payload.Max))\n\n// preparer le payload pour modifier le fichier\nmsg.payload = { \"SONAR_MIN\": parseFloat(msg.payload.Min), \"SONAR_MAX\": parseFloat(msg.payload.Max) }\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 240,
        "wires": [
            [
                "4de1fb0565a38dd2"
            ]
        ]
    },
    {
        "id": "22b89a8a12a029fe",
        "type": "inject",
        "z": "829f0f27baac9fee",
        "g": "64750ab7c62dcc42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "a52b542c6392c157"
            ]
        ]
    },
    {
        "id": "051930ac3ac4a449",
        "type": "function",
        "z": "829f0f27baac9fee",
        "g": "64750ab7c62dcc42",
        "name": "Set defaut value",
        "func": "// Si le fichier config.json n'existe pas on ajoute des valeur par defaut\nlet Min = \"SONAR_MIN\"\nlet Max = \"SONAR_MAX\"\n\nlet defautMin = 7\nlet defautMax = 72\n\n// set global variable\nglobal.set(Min, defautMin)\nglobal.set(Max, defautMax)\n\n// preparer le payload pour créer le fichier config.json\nmsg.payload = { \"SONAR_MIN\": parseFloat(msg.payload.Min), \"SONAR_MAX\": parseFloat(msg.payload.Max) }\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "55cbe8bef5d888df"
            ]
        ]
    },
    {
        "id": "4de1fb0565a38dd2",
        "type": "file",
        "z": "829f0f27baac9fee",
        "g": "024ee163770b1f3c",
        "name": "Set configuration file",
        "filename": "/data/config.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 920,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "a52b542c6392c157",
        "type": "file in",
        "z": "829f0f27baac9fee",
        "g": "64750ab7c62dcc42",
        "name": "Read Config file",
        "filename": "/data/config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 60,
        "wires": [
            [
                "21bd404c806cb129"
            ]
        ]
    },
    {
        "id": "d93ce52835a7c33f",
        "type": "catch",
        "z": "829f0f27baac9fee",
        "g": "64750ab7c62dcc42",
        "name": "File not exist",
        "scope": [
            "a52b542c6392c157"
        ],
        "uncaught": false,
        "x": 210,
        "y": 120,
        "wires": [
            [
                "051930ac3ac4a449"
            ]
        ]
    },
    {
        "id": "21bd404c806cb129",
        "type": "function",
        "z": "829f0f27baac9fee",
        "g": "64750ab7c62dcc42",
        "name": "Set defaut value",
        "func": "// Si le fichier DynEnvVar.json existe on load son contenu dans les variable globale\n\nlet data = JSON.parse(msg.payload)\n\nlet Min = \"SONAR_MIN\"\nlet Max = \"SONAR_MAX\"\n\nglobal.set(Min, parseFloat(data.SONAR_MIN))\nglobal.set(Max, parseFloat(data.SONAR_MAX))",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "55cbe8bef5d888df",
        "type": "file",
        "z": "829f0f27baac9fee",
        "g": "64750ab7c62dcc42",
        "name": "Set configuration file",
        "filename": "/data/config.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 660,
        "y": 120,
        "wires": [
            []
        ]
    }
]